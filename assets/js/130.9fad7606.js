(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{393:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"从零开始学习react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从零开始学习react"}},[a._v("#")]),a._v(" 从零开始学习react")]),a._v(" "),e("h2",{attrs:{id:"react生态系介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react生态系介绍"}},[a._v("#")]),a._v(" react生态系介绍")]),a._v(" "),e("h3",{attrs:{id:"js模块化开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js模块化开发"}},[a._v("#")]),a._v(" js模块化开发")]),a._v(" "),e("h4",{attrs:{id:"cdn-based-传统基于-script-标签进行引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cdn-based-传统基于-script-标签进行引入"}},[a._v("#")]),a._v(" CDN-based：传统基于<script>标签进行引入")]),a._v(" "),e("p",[a._v("主要有以下问题")]),a._v(" "),e("ul",[e("li",[a._v("全局作用域的变量冲突")]),a._v(" "),e("li",[a._v("文件只能按照标签引入的顺序进行加载，不具有弹性")]),a._v(" "),e("li",[a._v("各种资源和版本难以维护")]),a._v(" "),e("li",[a._v("必须主动判断模块和函数库的依赖关系")])]),a._v(" "),e("h4",{attrs:{id:"amd-异步加载模块-定义模块的时候就需要定义依赖的模块-常用于浏览器端-一个重要的实现就是require-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#amd-异步加载模块-定义模块的时候就需要定义依赖的模块-常用于浏览器端-一个重要的实现就是require-js"}},[a._v("#")]),a._v(" AMD：异步加载模块，定义模块的时候就需要定义依赖的模块，常用于浏览器端，一个重要的实现就是require.js")]),a._v(" "),e("h4",{attrs:{id:"common-js-同步加载模块-通过require进行模块同步导入-通过exports-module-exports输入模块-常用于服务器端-一个重要的实现就是nodejs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#common-js-同步加载模块-通过require进行模块同步导入-通过exports-module-exports输入模块-常用于服务器端-一个重要的实现就是nodejs"}},[a._v("#")]),a._v(" common.js：同步加载模块，通过require进行模块同步导入，通过exports module.exports输入模块，常用于服务器端，一个重要的实现就是nodejs")]),a._v(" "),e("h4",{attrs:{id:"cmd-规范和amd类似-但保持了与commonjs的兼容性-依赖就近-延迟实现-一个重要的实现就是sea-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd-规范和amd类似-但保持了与commonjs的兼容性-依赖就近-延迟实现-一个重要的实现就是sea-js"}},[a._v("#")]),a._v(" CMD：规范和AMD类似，但保持了与Commonjs的兼容性，依赖就近，延迟实现，一个重要的实现就是sea.js")]),a._v(" "),e("h4",{attrs:{id:"umd-兼容amd和commonjs-使得模块可以跨平台执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#umd-兼容amd和commonjs-使得模块可以跨平台执行"}},[a._v("#")]),a._v(" UMD：兼容AMD和commonjs，使得模块可以跨平台执行")]),a._v(" "),e("ul",[e("li",[a._v("chpt5 react 15版本的生命周期\n"),e("img",{attrs:{src:"2020-09-06-10-49-14.png",alt:"react 15版本的生命周期"}})]),a._v(" "),e("li",[a._v("chpt6 Immutable Data\n所谓的Immutable Data 就是一旦建立，就不能再被修改的数据数据。一般来说在 JavaScript 中有两种数据类型：Primitive（String、Number、Boolean、null、undefinded）和 Object（Reference）。在 JavaScript 中对象的操作比起 Java 容易很多，但也因为相对弹性不严谨，所以产生了一些问题。在JavaScript 中的 Object（对象）数据是 Mutable（可以变的），由于是使用Reference 的方式，所以当修改到复制的值也会修改到原始值。例如下面的 map2值是指到 map1 ，所以当 map1 值一改， map2 的值也会受影响。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("import Immutable from 'immutable';\nvar map1 = Immutable.Map({ a: 1, b: 3 });\nvar map2 = map1.set('a', 2);\nmap1.get('a'); // 1\nmap2.get('a'); // 2\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);