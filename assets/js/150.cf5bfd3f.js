(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{375:function(t,e,r){"use strict";r.r(e);var l=r(42),a=Object(l.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"关键组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键组件"}},[t._v("#")]),t._v(" 关键组件")]),t._v(" "),r("h3",{attrs:{id:"flutterviewcontroller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutterviewcontroller"}},[t._v("#")]),t._v(" FlutterViewController")]),t._v(" "),r("ul",[r("li",[t._v("初始化或者替换当前的 FlutterEngine")]),t._v(" "),r("li",[t._v("初始化 FlutterView")]),t._v(" "),r("li",[t._v("初始化正在发生的手势集合")]),t._v(" "),r("li",[t._v("加载闪屏页，传入 FlutterEngine 的构造函数没有这项，应该是考虑了多 FlutterViewController 的场景下不好频繁加载闪屏页")]),t._v(" "),r("li",[t._v("设置 UIInterfaceOrientationMask 和 UIStatusBarStyle")]),t._v(" "),r("li",[t._v("添加一系列的通知，包括 Application 的生命周期，键盘事件，Accessibility的事件等")]),t._v(" "),r("li",[t._v("将 FlutterViewController 设置给 FlutterEngine")]),t._v(" "),r("li",[t._v("在 loadView 函数中，设置了 FlutterViewController 的 view，并判断是否需要加载闪屏页，可以通过重写 splashScreenView 的 get 方法返回 nil 的方式彻底不加载闪屏页")]),t._v(" "),r("li",[t._v("提供了三个接口允许我们在原生端对 dart 的 Navigator 直接进行操作setInitialRoute 在 iOS 端通过 navigationChannel 来告诉 dart 具体的 initialRoute，这个过程略微特殊，并不会在 dart 端直接接收 channel 信息， 而是在引擎层面做了处理。pushRoute and popRoute实现方式主要还是通过引擎内置的 navigationChannel 通知 dart 端，对应的在 dart 端 SystemChannels 类中，存在对应的 channel")])]),t._v(" "),r("h3",{attrs:{id:"flutterview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutterview"}},[t._v("#")]),t._v(" FlutterView")]),t._v(" "),r("ul",[r("li",[t._v("初始化时传入 FlutterViewEngineDelegate")]),t._v(" "),r("li",[t._v("创建 flutter::IOSSurface")])]),t._v(" "),r("h3",{attrs:{id:"flutterengine"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutterengine"}},[t._v("#")]),t._v(" FlutterEngine")]),t._v(" "),r("ul",[r("li",[t._v("构造函数，initWithName:project:allowHeadlessExecution，allowHeadlessExecution允许初始化引擎时不强依赖FlutterViewController`，主要是FlutterDartProject 初始化 FlutterPlatformViewsController 的初始化")]),t._v(" "),r("li",[t._v("启动引擎，runWithEntrypoint:libraryURI: 可传入自定义的 entrypoint")]),t._v(" "),r("li",[t._v("释放资源，destroyContext")]),t._v(" "),r("li",[t._v("语义树是否建立，ensureSemanticsEnabled，关于语义树文档比较少，大概是残疾人模式下需要用到的东西")]),t._v(" "),r("li",[t._v("FlutterViewController 的 get/set")]),t._v(" "),r("li",[t._v("最后是一堆内置的 channel")])]),t._v(" "),r("h3",{attrs:{id:"dartisolate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dartisolate"}},[t._v("#")]),t._v(" DartIsolate")]),t._v(" "),r("ul",[r("li",[t._v("DartIsolate’PrepareIsolate")]),t._v(" "),r("li",[t._v("RunFromLibrary")])]),t._v(" "),r("h2",{attrs:{id:"运行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行流程"}},[t._v("#")]),t._v(" 运行流程")]),t._v(" "),r("ul",[r("li",[t._v("寻找 DartLibrary")]),t._v(" "),r("li",[t._v("定位到 Entrypoint")]),t._v(" "),r("li",[t._v("创建 FlutterEngine，传入 DartLibrary 和 Entrypoint")]),t._v(" "),r("li",[t._v("创建 FlutterViewController，FlutterView")]),t._v(" "),r("li",[t._v("设置 FlutterEngine 的 viewController")]),t._v(" "),r("li",[t._v("创建 shell，启动 Dart VM")]),t._v(" "),r("li",[t._v("加载 DartLibrary，运行 dart 的 Entrypoint")]),t._v(" "),r("li",[t._v("截取 Dart UI 的界面并光栅化并 绘制 CALayer")])]),t._v(" "),r("p",[t._v("来源："),r("a",{attrs:{href:"https://juejin.im/post/5eb2788a5188256d6467bda5#heading-5",target:"_blank"}},[t._v("Flutter引擎源码解读-Flutter是如何在iOS上运行起来的")])])])}),[],!1,null,null,null);e.default=a.exports}}]);