(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{365:function(n,s,e){"use strict";e.r(s);var a=e(42),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"vue3-composition-api尝试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3-composition-api尝试"}},[n._v("#")]),n._v(" vue3 composition API尝试")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/liulongbinblogs/p/11649393.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue3 composition api介绍"),e("OutboundLink")],1)])]),n._v(" "),e("h2",{attrs:{id:"什么是composition-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是composition-api"}},[n._v("#")]),n._v(" 什么是composition API")]),n._v(" "),e("p",[n._v("组合式API。相对而言我们在Vue2中使用的叫Options API，也即配置型API，我们的代码通过Vue给定的options，将代码写入到各个options中。比如mountd是虚拟dom装载完成之后的钩子，因此在SSR的服务端这个钩子不会执行。然后我们的data定义必须放到data中，计算属性则需要放在computed，以及methods等不同的options。")]),n._v(" "),e("p",[n._v("使用Option API的好处，我个人而言，觉得这个最大的好处就是降低了门槛，也就是说：因为你必须按照给定的option来组织你的代码，即使你的代码写的真的挺乱，但是因为有这个Options在，所以别人阅读你的代码还是有章可循的，知道从哪里开始，对应的方法应该去哪里找，也就是说提升了你的下限。既然提到了好处，自然要说下缺点。缺点就是因为功能点的分散。")]),n._v(" "),e("p",[n._v("比如我要想在created里面去拉取数据，然后进行渲染，我们可能得在method里定义两个方法，一个是拉取数据，一个是渲染数据。")]),n._v(" "),e("p",[n._v("然后我们要在created里面调用method里的方法A，在方法A里面我们去调用拉取数据的方法，然后再调用渲染数据的方法，因此会导致我们原本应该是写在一起的一个业务逻辑的代码要被分散到各处。当然这个主要是针对一些对性能或是代码架构有高要求的场景。一般的情况下确实并不需要这个。不过既然有场景，那也还是要能满足，因此Vue3推出了Composition API，通过setup方法来实现，我们可以看到官方文档对这个的定义：一组低侵入式的、函数式的 API，使得我们能够更灵活地「组合」组件的逻辑。而且这个对于Vue3来说是可选的，也就是说如果你不想用组合式API，那么你仍然可以继续使用Vue2的OptionAPI。")]),n._v(" "),e("p",[n._v("具体的相关API的文档可以参考Composition API")]),n._v(" "),e("p",[n._v("对于一些统一的这种业务逻辑代码，原来可能每个组件内都需要去写，而组件的重用并不是那么容易实现。不过通过组合式API，则可以将很多公共逻辑抽象为公共方法，然后就可以很好的复用了.")]),n._v(" "),e("p",[n._v("但是组合式API也有缺点，他的缺点就是因为太自由了，所以对于水品没那么高的同学来说，很可能写的代码就能了一团乱麻，也就是所谓的面条代码。因此组合式API虽然可以提高上限，但是下限也低了。")]),n._v(" "),e("h2",{attrs:{id:"composition-api主要内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#composition-api主要内容"}},[n._v("#")]),n._v(" composition API主要内容")]),n._v(" "),e("h3",{attrs:{id:"setup函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup函数"}},[n._v("#")]),n._v(" setup函数")]),n._v(" "),e("p",[n._v("setup 函数是一个新的组件选项。作为在组件内使用 Composition API 的入口点。创建组件实例，然后初始化 props ，紧接着就调用setup 函数。")]),n._v(" "),e("ul",[e("li",[n._v("setup函数生命周期\n从生命周期钩子的视角来看，它会在 beforeCreate 钩子之前被调用，如果 setup 返回一个对象，则对象的属性将会被合并到组件模板的渲染上下文。")]),n._v(" "),e("li",[n._v("setup的返回类型\nsetup函数可以返回变量，也可以返回函数，")]),n._v(" "),e("li",[n._v("setup的参数\n第一个参数props\n第二个参数context，获取this中的部分内容attrs、slots、emit")]),n._v(" "),e("li",[n._v("setup的参数类型定义")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface Data {\n  [key: string]: unknown\n}\n\ninterface SetupContext {\n  attrs: Data\n  slots: Slots\n  emit: (event: string, ...args: unknown[]) => void\n}\n\nfunction setup(props: Data, context: SetupContext): Data\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("h3",{attrs:{id:"响应式api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应式api"}},[n._v("#")]),n._v(" 响应式API")]),n._v(" "),e("ul",[e("li",[n._v("reactive\n接收一个普通对象然后返回该普通对象的响应式代理。响应式转换是“深层的”：会影响对象内部所有嵌套的属性。基于 ES2015 的 Proxy 实现，返回的代理对象不等于原始对象。建议仅使用代理对象而避免依赖原始对象。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const obj = reactive({ count: 0 })\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("ul",[e("li",[n._v("ref\n接受一个参数值并返回一个响应式且可改变的 ref 对象。ref 对象拥有一个指向内部值的单一属性 .value。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。\n当 ref 作为渲染上下文的属性返回（即在setup() 返回的对象中）并在模板中使用时，它会自动解套，无需在模板内额外书写 .value：\n当 ref 作为 reactive 对象的 property 被访问或修改时，也将自动解套 value 值，其行为类似普通属性,从 Array 或者 Map 等原生集合类中访问 ref 时，不会自动解套\n注意如果将一个新的 ref 分配给现有的 ref， 将替换旧的 ref：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("ul",[e("li",[n._v("computed\n传入一个 getter 函数，返回一个默认不可手动修改的 ref 对象。或者传入一个拥有 get 和 set 函数的对象，创建一个可手动修改的计算状态。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // 错误！\nconst count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  },\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("ul",[e("li",[n._v("watchEffect\n立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。\n当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时， 侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。也可以显式调用返回值以停止侦听。\n有时副作用函数会执行一些异步的副作用, 这些响应需要在其失效时清除（即完成之前状态已改变了）。所以侦听副作用传入的函数可以接收一个 onInvalidate 函数作入参, 用来注册清理失效时的回调。当以下情况发生时，这个失效回调会被触发:")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> 打印出 0\n\nsetTimeout(() => {\n  count.value++\n  // -> 打印出 1\n}, 100)\n\nconst stop = watchEffect(() => {\n  /* ... */\n})\n\n// 之后\nstop()\n\nwatchEffect((onInvalidate) => {\n  const token = performAsyncOperation(id.value)\n  onInvalidate(() => {\n    // id 改变时 或 停止侦听时\n    // 取消之前的异步操作\n    token.cancel()\n  })\n})\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br")])]),e("ul",[e("li",[n._v("watch\nwatch 需要侦听特定的数据源，并在回调函数中执行副作用。默认情况是懒执行的，也就是说仅在侦听的源变更时才执行回调。\n对比 watchEffect，watch 允许我们：懒执行副作用；更明确哪些状态的改变会触发侦听器重新运行副作用；访问侦听状态变化前后的值")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 侦听一个 getter\nconst state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)\n\n// 直接侦听一个 ref\nconst count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})\nwatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {\n  /* ... */\n})\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("ul",[e("li",[n._v("readonly\n传入一个对象（响应式或普通）或 ref，返回一个原始对象的只读代理。一个只读的代理是“深层的”，对象内部任何嵌套的属性也都是只读的。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const original = reactive({ count: 0 })\n\nconst copy = readonly(original)\n\nwatchEffect(() => {\n  // 依赖追踪\n  console.log(copy.count)\n})\n\n// original 上的修改会触发 copy 上的侦听\noriginal.count++\n\n// 无法修改 copy 并会被警告\ncopy.count++ // warning!\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("h3",{attrs:{id:"生命周期钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子函数"}},[n._v("#")]),n._v(" 生命周期钩子函数")]),n._v(" "),e("p",[n._v("生命周期钩子注册函数只能在 setup() 期间同步使用， 因为它们依赖于内部的全局状态来定位当前组件实例（正在调用 setup() 的组件实例）, 不在当前组件下调用这些函数会抛出一个错误。")]),n._v(" "),e("p",[n._v("组件实例上下文也是在生命周期钩子同步执行期间设置的，因此，在卸载组件时，在生命周期钩子内部同步创建的侦听器和计算状态也将自动删除。\n2.X生命周期对应关系\nbeforeCreate -> 使用 setup()\ncreated -> 使用 setup()\nbeforeMount -> onBeforeMount\nmounted -> onMounted\nbeforeUpdate -> onBeforeUpdate\nupdated -> onUpdated\nbeforeDestroy -> onBeforeUnmount\ndestroyed -> onUnmounted\nerrorCaptured -> onErrorCaptured\n新增生命周期\nonRenderTracked\nonRenderTriggered")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { onMounted, onUpdated, onUnmounted } from 'vue'\n\nconst MyComponent = {\n  setup() {\n    onMounted(() => {\n      console.log('mounted!')\n    })\n    onUpdated(() => {\n      console.log('updated!')\n    })\n    onUnmounted(() => {\n      console.log('unmounted!')\n    })\n  },\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("h3",{attrs:{id:"依赖注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[n._v("#")]),n._v(" 依赖注入")]),n._v(" "),e("p",[n._v("provide 和 inject 提供依赖注入，功能类似 2.x 的 provide/inject。两者都只能在当前活动组件实例的 setup() 中调用。\ninject 接受一个可选的的默认值作为第二个参数。如果未提供默认值，并且在 provide 上下文中未找到该属性，则 inject 返回 undefined。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { provide, inject } from 'vue'\n\nconst ThemeSymbol = Symbol()\n\nconst Ancestor = {\n  setup() {\n    provide(ThemeSymbol, 'dark')\n  },\n}\n\nconst Descendent = {\n  setup() {\n    const theme = inject(ThemeSymbol, 'light' /* optional default value */)\n    return {\n      theme,\n    }\n  },\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("h2",{attrs:{id:"操作步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作步骤"}},[n._v("#")]),n._v(" 操作步骤")]),n._v(" "),e("ul",[e("li",[n._v("在vue3时，composition-api已经被包含在Vue中，所以直接进行引用(在vue2环境中需要npm install @vue/composition-api --save)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 父组件中通过provide函数向子级组件共享数据（不限层级）\nimport { provide } from 'vue'\n  setup() {\n    //    provide('要共享的数据名称', 被共享的数据)\n    provide('globalColor', 'yellow')\n  },\n  // 子组件中通过调用 inject 函数时，通过指定的数据名称，获取到父级共享的数据\n  <template>\n  <div>\n    \x3c!-- 通过属性绑定，为标签设置字体颜色 --\x3e\n    <h5 :style=\"{color: themeColor}\">Level Two</h5>\n  </div>\n</template>\nimport { inject } from 'vue'\n  setup() {\n    //  inject('父组件共享的数据名称')\n    const themeColor = inject('globalColor')\n\t\n    // 把接收到的共享数据 return 给 Template 使用\n    return {\n      themeColor\n    }\n  },\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);